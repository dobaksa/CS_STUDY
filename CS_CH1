CH1 -> 디자인 패턴 AND 프로그래밍 패러다임 


- 디자인 패턴 => 생성/ 구조/ 행위 
문제점들을 객체 간의 상호관계 등을 이용하여 해결할 수 있도록 하나의 규약 형태로 만들어 놓은 것을 의미 


패턴 특징, 장점, 단점 
클래스 c1

인스턴스(본진 저장소) 1개만 

여러 메서드 상관없이 1개의 인스턴스만 공유해서 사용

1. 생성패턴 -> 싱글톤 패턴 
1-1. 정의 및 특징 
	하나의 클래스에 하나의 인스턴스만 가지는 패턴 
	객체의 인스턴스가 오직 1개만 생성
	전역변수를 사용하지 않고, 객체를 하나만 생성하도록 하며, 생성된 객체를 어디에서든지 참조할 수 있도록 하는 디자인 패턴 
	데이터베이스 연결모듈에 많이 사용 


1-2. 장점 
	최초에 한번만 인스턴스를 정의하여 고정된 메모리를 사용하기 때문에 메모리 사용 측면에서 낭비를 방지할 수 있다. 
	이미 생성된 인스턴스를 활용하니 속도 측면에서도 이점이 있다고 볼 수 있다.
	=> 인스턴스 생성시 비용이 줄어든다
	
	
	공유가 쉽다 -> 싱글톤 인스턴스가 전역으로 사용되는 인스턴스이기 때문에 다른 클래스의 인스턴스들이 접근하여 사용할 수 있다. 하지만 여러 클래스의 인스턴스에서 싱글톤 인스턴스의 데이터에 동시에 접근하게 되면 동시성 문제가 발생할 수 있으니 이점을 유의해서 설계하는 것이 좋다.

- 단점 
	의존성이 높아진다 => 해결방법 의존성 주입 (factory method 방식과 비슷) 
	
	상위 클래스에서 정의/ 하위 클래스에서 인스턴스 생성  
	
	-> 싱글톤 패턴에서 나타난 모듈간 강한 결합성 문제를 느슨한 결합으로 만들어
	의존성을 낮춰서 해결(디커플링) 
	
	- 의존성 주입 장점 
	모듈을 쉽게 교체할 수 있는 구조 -> 테스팅 쉽고, 마이그레이션 수월 
	애플리케이션 의존성 방향이 일관되고, 쉽게 추론가능, 모듈관 관계들이 조금더 명확해짐 
	
	- 의존성 주입 단점 
	클래스 수가 늘어나 복잡성 증가, 수가 많아지니까 런타임 증가 
	
	- 의존성 주입 원칙 
	상위 모듈은 하위 모듈에서 어떠한 것도 가져오지 않아야 한다. 
	
	- java에서 많이 사용하는 의존성 주입 방법 
		1.생성자를 이용한 주입 (Constructor Injection)
		2.Setter를 이용한 주입 (Setter Injection)
		3. @Autowired 어노테이션으로 주입
	
	TDD(Test Driven Development) => 단위 테스트가 어렵다. 독립적인 테스트를 해야하는데, 하나의 인스턴스로 모두 사용하기 때문에 개별적인 테스트가 어렵다. 


2. 팩토리 패턴 
=> 팩토리 메서드(factory method) 패턴(생성), 추상 팩토리(abstract factory) 패턴(행위) 

상위클래스와 서브 클래스 존재 
2-1. 팩토리 패턴 특징
	-상위 클래스에서 객체를 생성하는 인터페이스를 정의하고, 하위클래스에서 인스턴스를 생성하도록 하는 방식으로, 상위클래스에선 인스턴스를 만드는 방법만 정의, 하위클래스에선 그 데이터의 생성을 책임지고 오버라이딩하여 인터페이스와 실제 객체를 생성하는 클래스를 분리할 수 있는 특성을 갖는 디자인 패턴 
	
	- 상속관계에 있는 두 클래스에서 상위클래스는 중요 뼈대를 결정, 하위 클래스에서 객체생성에 대한 상세 내용을 결정 
	
2-2. 팩토리 패턴 장점
	- 상위 클래스와 하위 클래스가 분리 -> 느슨한 결합으로 인해 더 많은 유연성 
	- 생성로직이 하위 클래스에 있어서 코드 리팩토링시 유리=> 유지보수성 증가 
	
2-3. 팩토리 패턴 단점
	- 각 제품 구현체마다 팩토리 객체들을 모두 구현해주어야 하기 때문에, 구현체가 늘어날때 마다 팩토리 클래스가 증가하여 서브 클래스 수가 증가한다. 
	
	- 클래스의 수가 늘어남 => 코드의 복잡성이 증가한다.
	
3. 전략 패턴 
+) 전략 : 일종의 '알고리즘'이 될 수 도 있으며, '기능'이나 '동작'이 될 수도 있는 특정한 목표를 수행하기 위한 행동 계획

3-1. 전략 패턴 특징 
	-실행(런타임) 중에 알고리즘 전략을 선택하여 객체 동작을 실시간으로 바뀌도록 할 수 있게 하는 행위 디자인 패턴 이다.
	
	
	- 알고리즘 군을 정의하고 각 클래스로 캡슐화 한다음 필요할 때 서로 교환해서 사용할 수 있게 하는 패턴 
	행위를 클래스로 캡슐화해 동적으로 행위를 자유롭게 바꿀 수 있게 해주는 디자인 패턴 
	
	- 상위 클래스(전략 클래스)에선 추상화하여 정의만(interface)
	하위 클래스에서 변경되는 행위에따라 새로운 클래스 생성(implements)
	
	새로운 행위(전략)들이 추가될때마다 하위 클래스만 새로 정의하여 사용 => 수정과 유지보수성 향상 
	
	
	- 객체지향 프로그래밍을 위해 유지보수성 향상을 위하여 약간 복잡하더라도 이러한 패턴을 적용하여
	
3-2. 전략 패턴 장점 
	- 어떤 일을 수행하는 알고리즘이 여러가지 일때, 동작들을 미리 전략으로 정의함으로써 손쉽게 전략을 교체할 수 있는, 알고리즘 변형이 빈번하게 필요한 경우에 적합한 패턴
	
	- 알고리즘을 정의하고 캡슐화하여 런타임 시에 알고리즘을 선택하는 데 사용됨
	- 알고리즘을 쉽게 변경 및 대체할 수 있으므로 유연함
	- 알고리즘 추가 및 수정을 할 때 코드 수정이 최소화되므로 확장성이 높아짐
	- 알고리즘을 캡슐화했기에 코드 재사용성이 좋음
	- 각각 알고리즘을 독립적으로 테스트할 수 있으므로 용이함
	
3-3. 전략 패턴 단점 
	- 추가적인 클래스 및 인터페이스가 필요하기에 코드 복잡성이 증가될 수 있음
	- 런타임 시에 알고리즘을 선택하는 데 추가적인 오버헤드 발생 가능
	- 전략패턴을 구현하는 것이 어려울 수 있으므로, 적절한 분석과 설계가 필요함

4. 옵저버 패턴 

클래스 

인스턴스 

메서드 


4-1. 옵저버 패턴 특징 
	- 주체가 어떤 객체의 상태변화를 관찰하다가 상태 변화 발생시 옵저버 목록에 있는 옵저버들에게 변화를 알려줌 
	
	- 어떤 객체의 상태가 변할 때 그와 연관된 객체들에게 알림을 보내는 디자인 패턴
	
	ex) 트위터 => 주체에 팔로우하면 구독자들은 새로운 트윗이 올때마다 알림을 받음 
	- MVC(MODEL VIEW CONTROLLER) 패턴에 자주사용 
	
4-2. 옵저버 패턴 장점  
	- Subject의 상태 변경을 주기적으로 조회하지 않고 자동으로 감지할 수 있다.
	- 상위(주체자)의 코드를 수정하지 않고도 하위(옵저버) 클래스를 추가 가능 
	- 런타임 시점에서에 발행자와 구독 알림 관계를 맺을 수 있다. => 서버가 구동하면서 클래스간 연결이 가능하다 
	- 상태를 변경하는 객체(Subject)와 변경을 감지하는 객체(Observer)의 관계를 느슨하게 유지할 수 있다. (느슨한 결합)
	
	
4-3. 옵저버 패턴 단점 
	- 옵저버(하위)는 알림 순서를 제어할수 없고, 무작위 순서로 알림을 받음
	
	- 하드 코딩으로 구현할수는 있겠지만, 복잡성과 결합성만 높아지기 때문에 추천되지는 않는 방법이다.
	
	- 옵저버 패턴을 자주 구성하면 구조와 동작을 알아보기 힘들어져 코드 복잡도가 증가한다. 
	
	- 다수의 옵저버 객체를 등록 이후 해지하지 않는다면 메모리 누수가 발생할 수도 있다 => 클래스를 해지하지 않으면 쓸데없는 메모리가 계속 사용됨 


-출처 
싱글톤 패턴 
https://tecoble.techcourse.co.kr/post/2020-11-07-singleton/
https://ryong.oopy.io/a67cba39-b814-4a91-ace7-c2c78fe8fa23
https://ksbsite.tistory.com/4

팩토리 패턴 
https://jusungpark.tistory.com/14
https://inpa.tistory.com/entry/GOF-%F0%9F%92%A0-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9CFactory-Method-%ED%8C%A8%ED%84%B4-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90#%ED%8C%A8%ED%84%B4_%EB%8B%A8%EC%A0%90


전략 패턴 
https://inpa.tistory.com/entry/GOF-%F0%9F%92%A0-%EC%A0%84%EB%9E%B5Strategy-%ED%8C%A8%ED%84%B4-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90

https://ssdragon.tistory.com/140

- 옵저버 패턴 
https://inpa.tistory.com/entry/GOF-%F0%9F%92%A0-%EC%98%B5%EC%A0%80%EB%B2%84Observer-%ED%8C%A8%ED%84%B4-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90#%ED%8C%A8%ED%84%B4_%EC%9E%A5%EC%A0%90
